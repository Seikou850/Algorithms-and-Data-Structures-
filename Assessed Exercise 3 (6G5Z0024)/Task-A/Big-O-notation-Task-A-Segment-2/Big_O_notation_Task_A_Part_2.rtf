{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 Courier-Oblique;
}
{\colortbl;\red255\green255\blue255;\red90\green127\blue230;\red29\green29\blue29;\red178\green119\blue255;
\red175\green175\blue175;\red197\green197\blue197;\red29\green29\blue29;\red90\green127\blue230;\red178\green119\blue255;
\red175\green175\blue175;\red54\green29\blue80;\red51\green197\blue124;\red101\green101\blue101;\red188\green145\blue90;
\red116\green187\blue89;\red230\green125\blue179;}
{\*\expandedcolortbl;;\csgenericrgb\c35294\c49804\c90196;\csgenericrgb\c11373\c11373\c11373;\csgenericrgb\c69804\c46667\c100000;
\csgenericrgb\c68627\c68627\c68627;\csgenericrgb\c77255\c77255\c77255;\csgenericrgb\c11373\c11373\c11373;\csgenericrgb\c35294\c49804\c90196;\csgenericrgb\c69804\c46667\c100000;
\csgenericrgb\c68627\c68627\c68627;\csgenericrgb\c21176\c11373\c31373;\csgenericrgb\c20000\c77255\c48627;\csgenericrgb\c39608\c39608\c39608;\csgenericrgb\c73725\c56863\c35294;
\csgenericrgb\c45490\c73333\c34902;\csgenericrgb\c90196\c49020\c70196;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 using \cf4 System\cf5 ;\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf6 \cb7 \

\f0 \cf8 namespace \cf9 Big_O_notation_Task_A_Part_2\
\cf10 \cb11 \{\cb7 \
     \cf8 class \cf9 Program\
    \cf10 \{\
        \cf8 public static void \cf12 Main\cf10 (\cf8 string\cf10 [] \cf13 args\cf10 )\
        \{\
            \cf9 Console\cf10 .\cf12 WriteLine\cf10 (\cf14 "please input m "\cf10 ); 
\f2\i \cf15 // O(1) - Constant time complexity will always take same amount of time to be executed. \
            
\f0\i0 \cf8 int \cf10 m = \cf9 Convert\cf10 .\cf12 ToInt32\cf10 (\cf9 Console\cf10 .\cf12 ReadLine\cf10 ()); 
\f2\i \cf15 // O(1) - Constant\
\
            
\f0\i0 \cf8 for \cf10 (\cf8 int \cf10 j = \cf16 1\cf10 ; j <= m; j++) 
\f2\i \cf15 // for loop (m+1), the loop will be loped m times, the plus one is \
            //because the for loop will be loped once to check if the condition is true.\
            
\f0\i0 \cf10 \{\
\
                \cf9 Console\cf10 .\cf12 WriteLine\cf10 (\cf14 "for loop"\cf10 ); 
\f2\i \cf15 // O(m) - Constant time complexity, it will output the text m times.\
\
            
\f0\i0 \cf10 \} 
\f2\i \cf15 // end of the loop\
\
            
\f0\i0 \cf8 while \cf10 (m > \cf16 0\cf10 ) 
\f2\i \cf15 //(m + 1)while m is bigger than 0 while loop will loop until the condition is false,\
                          //which also translates to m being 0. We can convert the while loop in a for loop\
                          // to calculate the Big O notation.\
            
\f0\i0 \cf10 \{\
                m--; 
\f2\i \cf15 //each time it loops (m - 1)\
                
\f0\i0 \cf9 Console\cf10 .\cf12 WriteLine\cf10 (\cf14 "while loop"\cf10 ); 
\f2\i \cf15 // O(m) - Constant, each time it loops print this statement.\
            
\f0\i0 \cf10 \}\
            \
            
\f2\i \cf15 //The Big O notation for this algorithm is: Big 0 = O(m)\
\
        
\f0\i0 \cf10 \}\
    \}\
\cb11 \}\
}